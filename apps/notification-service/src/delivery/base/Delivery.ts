/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { Audit } from "../../audit/base/Audit";
import {
  ValidateNested,
  IsOptional,
  IsDate,
  IsEnum,
  IsString,
} from "class-validator";
import { Type } from "class-transformer";
import { Channel } from "../../channel/base/Channel";
import { EnumDeliveryDeliveryStatus } from "./EnumDeliveryDeliveryStatus";
import { Message } from "../../message/base/Message";

@ObjectType()
class Delivery {
  @ApiProperty({
    required: false,
    type: () => [Audit],
  })
  @ValidateNested()
  @Type(() => Audit)
  @IsOptional()
  audits?: Array<Audit>;

  @ApiProperty({
    required: false,
    type: () => Channel,
  })
  @ValidateNested()
  @Type(() => Channel)
  @IsOptional()
  channel?: Channel | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  deliveredAt!: Date | null;

  @ApiProperty({
    required: false,
    enum: EnumDeliveryDeliveryStatus,
  })
  @IsEnum(EnumDeliveryDeliveryStatus)
  @IsOptional()
  @Field(() => EnumDeliveryDeliveryStatus, {
    nullable: true,
  })
  deliveryStatus?: "Option1" | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => Message,
  })
  @ValidateNested()
  @Type(() => Message)
  @IsOptional()
  message?: Message | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Delivery as Delivery };
